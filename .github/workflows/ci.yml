name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dart-version: ['3.0.0', 'stable']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Dart SDK
        uses: dart-lang/setup-dart@v1
        with:
          sdk: ${{ matrix.dart-version }}

      - name: Cache pub dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            **/.dart_tool
            **/.packages
          key: ${{ runner.os }}-dart-${{ matrix.dart-version }}-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-dart-${{ matrix.dart-version }}-
            ${{ runner.os }}-dart-

      - name: Get dependencies
        run: dart pub get

      - name: Verify dependencies
        run: dart pub deps

      - name: Check code formatting
        run: dart format --set-exit-if-changed .

      - name: Run static analysis
        run: dart analyze --fatal-infos

      - name: Run tests
        run: dart test

      # Generate coverage only on stable Dart version
      - name: Generate coverage report
        if: matrix.dart-version == 'stable'
        run: |
          echo "üìä Generating coverage report..."
          dart test --coverage=coverage/
          dart pub global activate coverage
          dart pub global run coverage:format_coverage \
            --lcov \
            --in=coverage/ \
            --out=coverage/lcov.info \
            --packages=.dart_tool/package_config.json \
            --report-on=lib

      - name: Check coverage threshold
        if: matrix.dart-version == 'stable'
        run: |
          # Install lcov for coverage checking
          sudo apt-get update
          sudo apt-get install -y lcov
          
          # Extract coverage percentage
          COVERAGE=$(lcov --summary coverage/lcov.info 2>/dev/null | grep lines | awk '{print $2}' | sed 's/%//' | head -1)
          
          if [ -z "$COVERAGE" ]; then
            echo "‚ö†Ô∏è  Could not determine coverage percentage"
            COVERAGE=0
          fi
          
          echo "üìà Current coverage: ${COVERAGE}%"
          
          # Check if coverage meets minimum threshold (40% for new project)
          if (( $(echo "$COVERAGE < 40" | bc -l) )); then
            echo "‚ùå Coverage ${COVERAGE}% is below minimum threshold of 40%"
            echo "üí° Run 'make coverage' locally to see detailed coverage report"
            echo "üéØ Consider gradually increasing this threshold as the project grows"
            exit 1
          else
            echo "‚úÖ Coverage ${COVERAGE}% meets minimum threshold"
            if (( $(echo "$COVERAGE >= 60" | bc -l) )); then
              echo "ÔøΩ Good progress! Consider raising the threshold to 60%"
            fi
            if (( $(echo "$COVERAGE >= 80" | bc -l) )); then
              echo "üåü Excellent coverage! Project is ready for higher standards"
            fi
          fi

      - name: Upload coverage artifacts
        if: matrix.dart-version == 'stable'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage/lcov.info
            coverage/*.json
          retention-days: 30
